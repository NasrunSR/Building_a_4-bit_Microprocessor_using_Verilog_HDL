module test(SW,KEY,RESET,EN,LEDR,HEX0,HEX1,HEX2,HEX3,HEX4,HEX5,Tc,Ta,Tb,To,Talu,Tdec,Trom,Tromin,Tmuxin,Tmuxout,Tr,Tcarry,Tjump,Tdf,Tcount);

input [9:0] SW;
input [3:0] KEY;
output RESET,EN;
output [9:0] LEDR;
output [6:0] HEX0;
output [6:0] HEX1;
output [6:0] HEX2;
output [6:0] HEX3;
output [6:0] HEX4;
output [6:0] HEX5;
output [3:0] Tc,Ta,Tb,To,Talu,Tdec,Tmuxin,Tmuxout,Tcount;
output [7:0] Trom;
output [4:0] Tromin;
output Tr,Tcarry,Tjump,Tdf;
assign RESET=1'b1;
assign EN=1'b1;

wire [3:0] MUX_OUT;
wire [3:0] ALU_OUT;
wire [3:0] REGA_OUT;
wire [3:0] REGB_OUT;
wire [3:0] REGo_OUT;
wire [3:0] DEC_OUT;
wire [3:0] COUNT_OUT;
wire [3:0] ROM_IN;
wire [7:0] ROM_OUT;
wire [3:0] MUX_IN;
wire [3:0] COUNT_IN;
wire CARRY, DF_OUT,AND_OUT,OR_OUT;
wire C,J,D0,D1,S,Sreg,IN2,IN0;

assign LEDR[9]=KEY[0]; //assigning clock to LEDR[9]
//starting the counter
assign COUNT_IN[3]=1'b0;
assign COUNT_IN[2]=ROM_OUT[2];
assign COUNT_IN[1]=ROM_OUT[1];
assign COUNT_IN[0]=ROM_OUT[0];

counter C0(COUNT_IN,KEY[0],OR_OUT, RESET, COUNT_OUT);
display_out OUT0(COUNT_OUT,HEX4,HEX5);
assign Tc=COUNT_OUT;

assign ROM_IN[0]=COUNT_OUT[0];
assign ROM_IN[1]=COUNT_OUT[1];
assign ROM_IN[2]=COUNT_OUT[2];
assign ROM_IN[3]=COUNT_OUT[3];


assign Tromin=ROM_IN;
//output from counter is given as input to MEMORY
//ROM_MEMEORY MEMORY(ROM_IN,KEY[0],EN,ROM_OUT);
ROM_MEMEORY MEMORY2(COUNT_OUT,KEY[0],1'b1,ROM_OUT);
assign Trom=ROM_OUT;

assign J= ROM_OUT[7];
assign C= ROM_OUT[6];
assign D0= ROM_OUT[5];
assign D1= ROM_OUT[4];
assign Sreg= ROM_OUT[3];
assign S= ROM_OUT[2];
assign IN1= ROM_OUT[1];
assign IN0= ROM_OUT[0];

//DECODER to select enables of REGs
decoder_2_4 DEC(D0,D1,EN,DEC_OUT);
assign Tdec=DEC_OUT;
//assign LEDR[8]=DEC_OUT[1];
//2BY1 MUX to select input to REGs
//assigning custom INPUTs to MUX second input
assign MUX_IN[0]=IN0;
assign MUX_IN[1]=IN1;
assign MUX_IN[2]=S;
assign MUX_IN[3]=1'b0;
assign Tmuxin=MUX_IN;

twoby1mux MUX(MUX_IN,ALU_OUT,Sreg,MUX_OUT);
assign Tmuxout=MUX_OUT;

//REG A

reg4 A(MUX_OUT,KEY[0],DEC_OUT[0],RESET,REGA_OUT);
assign LEDR[8:5]=REGA_OUT;
assign Ta=REGA_OUT;

//REG B
reg4 B(MUX_OUT,KEY[0],DEC_OUT[1],RESET,REGB_OUT);
assign LEDR[3:0]=REGB_OUT;
assign Tb=REGB_OUT;

//FROM REGA to Ro
reg4 Ro(REGA_OUT,KEY[0],DEC_OUT[2],RESET,REGo_OUT);

//From registers to ALU.
ALU_ad_sub ALU(REGA_OUT,REGB_OUT,S,ALU_OUT,CARRY);
display_out OUT2(ALU_OUT,HEX2,HEX3);
assign Talu=ALU_OUT;
//Storing the carry in DFF
dff_1bit Dff0(CARRY,KEY[0],EN,RESET,DF_OUT);
assign Tdf=DF_OUT;

assign AND_OUT=DF_OUT&C;
assign OR_OUT=AND_OUT|J;

assign Tcarry=C;
assign Tjump=J;

display_out OUT1(REGo_OUT,HEX0,HEX1);
assign To=REGo_OUT;

endmodule
